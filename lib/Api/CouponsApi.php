<?php
/**
 * CouponsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DillerAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DillerAPI\ApiException;
use DillerAPI\Configuration;
use DillerAPI\HeaderSelector;
use DillerAPI\ObjectSerializer;

/**
 * CouponsApi Class Doc Comment
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */
class CouponsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelCouponReservation
     *
     * This endpoint should be called when a transaction is completed or cancelled to   release the coupon reservation and avoid making it unavailable for other transactions.
     *
     * @param  string $storeId storeId (required)
     * @param  string $memberId memberId (required)
     * @param  string $couponCode couponCode (required)
     * @param  \DillerAPI\Model\CouponCancelReservationRequest $body body (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DillerAPI\Model\ActionResponse
     */
    public function cancelCouponReservation($storeId, $memberId, $couponCode, $body = null)
    {
        list($response) = $this->cancelCouponReservationWithHttpInfo($storeId, $memberId, $couponCode, $body);
        return $response;
    }

    /**
     * Operation cancelCouponReservationWithHttpInfo
     *
     * This endpoint should be called when a transaction is completed or cancelled to   release the coupon reservation and avoid making it unavailable for other transactions.
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     * @param  string $couponCode (required)
     * @param  \DillerAPI\Model\CouponCancelReservationRequest $body (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DillerAPI\Model\ActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelCouponReservationWithHttpInfo($storeId, $memberId, $couponCode, $body = null)
    {
        $returnType = '\DillerAPI\Model\ActionResponse';
        $request = $this->cancelCouponReservationRequest($storeId, $memberId, $couponCode, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelCouponReservationAsync
     *
     * This endpoint should be called when a transaction is completed or cancelled to   release the coupon reservation and avoid making it unavailable for other transactions.
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     * @param  string $couponCode (required)
     * @param  \DillerAPI\Model\CouponCancelReservationRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelCouponReservationAsync($storeId, $memberId, $couponCode, $body = null)
    {
        return $this->cancelCouponReservationAsyncWithHttpInfo($storeId, $memberId, $couponCode, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelCouponReservationAsyncWithHttpInfo
     *
     * This endpoint should be called when a transaction is completed or cancelled to   release the coupon reservation and avoid making it unavailable for other transactions.
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     * @param  string $couponCode (required)
     * @param  \DillerAPI\Model\CouponCancelReservationRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelCouponReservationAsyncWithHttpInfo($storeId, $memberId, $couponCode, $body = null)
    {
        $returnType = '\DillerAPI\Model\ActionResponse';
        $request = $this->cancelCouponReservationRequest($storeId, $memberId, $couponCode, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelCouponReservation'
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     * @param  string $couponCode (required)
     * @param  \DillerAPI\Model\CouponCancelReservationRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelCouponReservationRequest($storeId, $memberId, $couponCode, $body = null)
    {
        // verify the required parameter 'storeId' is set
        if ($storeId === null || (is_array($storeId) && count($storeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storeId when calling cancelCouponReservation'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling cancelCouponReservation'
            );
        }
        // verify the required parameter 'couponCode' is set
        if ($couponCode === null || (is_array($couponCode) && count($couponCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCode when calling cancelCouponReservation'
            );
        }

        $resourcePath = '/api/v2.0/stores/{storeId}/members/{memberId}/coupons/{couponCode}/cancel-reservation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storeId !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($storeId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }
        // path params
        if ($couponCode !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCode' . '}',
                ObjectSerializer::toPathValue($couponCode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMemberCoupons
     *
     * This endpoint retrieves available coupons for a specific member.
     *
     * @param  string $storeId storeId (required)
     * @param  string $memberId memberId (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DillerAPI\Model\MemberCouponResponse[]
     */
    public function getMemberCoupons($storeId, $memberId)
    {
        list($response) = $this->getMemberCouponsWithHttpInfo($storeId, $memberId);
        return $response;
    }

    /**
     * Operation getMemberCouponsWithHttpInfo
     *
     * This endpoint retrieves available coupons for a specific member.
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DillerAPI\Model\MemberCouponResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMemberCouponsWithHttpInfo($storeId, $memberId)
    {
        $returnType = '\DillerAPI\Model\MemberCouponResponse[]';
        $request = $this->getMemberCouponsRequest($storeId, $memberId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\MemberCouponResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMemberCouponsAsync
     *
     * This endpoint retrieves available coupons for a specific member.
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberCouponsAsync($storeId, $memberId)
    {
        return $this->getMemberCouponsAsyncWithHttpInfo($storeId, $memberId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMemberCouponsAsyncWithHttpInfo
     *
     * This endpoint retrieves available coupons for a specific member.
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberCouponsAsyncWithHttpInfo($storeId, $memberId)
    {
        $returnType = '\DillerAPI\Model\MemberCouponResponse[]';
        $request = $this->getMemberCouponsRequest($storeId, $memberId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMemberCoupons'
     *
     * @param  string $storeId (required)
     * @param  string $memberId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMemberCouponsRequest($storeId, $memberId)
    {
        // verify the required parameter 'storeId' is set
        if ($storeId === null || (is_array($storeId) && count($storeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storeId when calling getMemberCoupons'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling getMemberCoupons'
            );
        }

        $resourcePath = '/api/v2.0/stores/{storeId}/members/{memberId}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storeId !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($storeId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreCoupons
     *
     * Retrieves store coupons. By default it only retrieves active coupons.
     *
     * @param  string $storeId The store Id (required)
     * @param  bool $alsoInactive When true, it also return coupons that are not currently valid. (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DillerAPI\Model\StoreCouponResponse[]
     */
    public function getStoreCoupons($storeId, $alsoInactive = null)
    {
        list($response) = $this->getStoreCouponsWithHttpInfo($storeId, $alsoInactive);
        return $response;
    }

    /**
     * Operation getStoreCouponsWithHttpInfo
     *
     * Retrieves store coupons. By default it only retrieves active coupons.
     *
     * @param  string $storeId The store Id (required)
     * @param  bool $alsoInactive When true, it also return coupons that are not currently valid. (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DillerAPI\Model\StoreCouponResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreCouponsWithHttpInfo($storeId, $alsoInactive = null)
    {
        $returnType = '\DillerAPI\Model\StoreCouponResponse[]';
        $request = $this->getStoreCouponsRequest($storeId, $alsoInactive);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\StoreCouponResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreCouponsAsync
     *
     * Retrieves store coupons. By default it only retrieves active coupons.
     *
     * @param  string $storeId The store Id (required)
     * @param  bool $alsoInactive When true, it also return coupons that are not currently valid. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreCouponsAsync($storeId, $alsoInactive = null)
    {
        return $this->getStoreCouponsAsyncWithHttpInfo($storeId, $alsoInactive)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoreCouponsAsyncWithHttpInfo
     *
     * Retrieves store coupons. By default it only retrieves active coupons.
     *
     * @param  string $storeId The store Id (required)
     * @param  bool $alsoInactive When true, it also return coupons that are not currently valid. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreCouponsAsyncWithHttpInfo($storeId, $alsoInactive = null)
    {
        $returnType = '\DillerAPI\Model\StoreCouponResponse[]';
        $request = $this->getStoreCouponsRequest($storeId, $alsoInactive);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreCoupons'
     *
     * @param  string $storeId The store Id (required)
     * @param  bool $alsoInactive When true, it also return coupons that are not currently valid. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoreCouponsRequest($storeId, $alsoInactive = null)
    {
        // verify the required parameter 'storeId' is set
        if ($storeId === null || (is_array($storeId) && count($storeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storeId when calling getStoreCoupons'
            );
        }

        $resourcePath = '/api/v2.0/stores/{storeId}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alsoInactive !== null) {
            $queryParams['alsoInactive'] = ObjectSerializer::toQueryValue($alsoInactive);
        }

        // path params
        if ($storeId !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($storeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reserveCoupon
     *
     * This endpoint enables users to reserve a coupon for their pending orders,   thereby ensuring that the coupon cannot be used for any other transactions.
     *
     * @param  string $storeId The storeId (required)
     * @param  string $memberId The memberId (required)
     * @param  string $couponCode The coupon code (required)
     * @param  \DillerAPI\Model\CouponReservationRequest $body Details of the coupon reservation request (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DillerAPI\Model\ActionResponse
     */
    public function reserveCoupon($storeId, $memberId, $couponCode, $body = null)
    {
        list($response) = $this->reserveCouponWithHttpInfo($storeId, $memberId, $couponCode, $body);
        return $response;
    }

    /**
     * Operation reserveCouponWithHttpInfo
     *
     * This endpoint enables users to reserve a coupon for their pending orders,   thereby ensuring that the coupon cannot be used for any other transactions.
     *
     * @param  string $storeId The storeId (required)
     * @param  string $memberId The memberId (required)
     * @param  string $couponCode The coupon code (required)
     * @param  \DillerAPI\Model\CouponReservationRequest $body Details of the coupon reservation request (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DillerAPI\Model\ActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reserveCouponWithHttpInfo($storeId, $memberId, $couponCode, $body = null)
    {
        $returnType = '\DillerAPI\Model\ActionResponse';
        $request = $this->reserveCouponRequest($storeId, $memberId, $couponCode, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reserveCouponAsync
     *
     * This endpoint enables users to reserve a coupon for their pending orders,   thereby ensuring that the coupon cannot be used for any other transactions.
     *
     * @param  string $storeId The storeId (required)
     * @param  string $memberId The memberId (required)
     * @param  string $couponCode The coupon code (required)
     * @param  \DillerAPI\Model\CouponReservationRequest $body Details of the coupon reservation request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reserveCouponAsync($storeId, $memberId, $couponCode, $body = null)
    {
        return $this->reserveCouponAsyncWithHttpInfo($storeId, $memberId, $couponCode, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reserveCouponAsyncWithHttpInfo
     *
     * This endpoint enables users to reserve a coupon for their pending orders,   thereby ensuring that the coupon cannot be used for any other transactions.
     *
     * @param  string $storeId The storeId (required)
     * @param  string $memberId The memberId (required)
     * @param  string $couponCode The coupon code (required)
     * @param  \DillerAPI\Model\CouponReservationRequest $body Details of the coupon reservation request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reserveCouponAsyncWithHttpInfo($storeId, $memberId, $couponCode, $body = null)
    {
        $returnType = '\DillerAPI\Model\ActionResponse';
        $request = $this->reserveCouponRequest($storeId, $memberId, $couponCode, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reserveCoupon'
     *
     * @param  string $storeId The storeId (required)
     * @param  string $memberId The memberId (required)
     * @param  string $couponCode The coupon code (required)
     * @param  \DillerAPI\Model\CouponReservationRequest $body Details of the coupon reservation request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reserveCouponRequest($storeId, $memberId, $couponCode, $body = null)
    {
        // verify the required parameter 'storeId' is set
        if ($storeId === null || (is_array($storeId) && count($storeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storeId when calling reserveCoupon'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling reserveCoupon'
            );
        }
        // verify the required parameter 'couponCode' is set
        if ($couponCode === null || (is_array($couponCode) && count($couponCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCode when calling reserveCoupon'
            );
        }

        $resourcePath = '/api/v2.0/stores/{storeId}/members/{memberId}/coupons/{couponCode}/reserve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storeId !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($storeId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }
        // path params
        if ($couponCode !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCode' . '}',
                ObjectSerializer::toPathValue($couponCode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateCoupon
     *
     * This endpoint validates a coupon code for a specific member.
     *
     * @param  string $storeId The store id (required)
     * @param  string $memberId The member id (required)
     * @param  string $couponCode The coupon code (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DillerAPI\Model\ActionResponse
     */
    public function validateCoupon($storeId, $memberId, $couponCode)
    {
        list($response) = $this->validateCouponWithHttpInfo($storeId, $memberId, $couponCode);
        return $response;
    }

    /**
     * Operation validateCouponWithHttpInfo
     *
     * This endpoint validates a coupon code for a specific member.
     *
     * @param  string $storeId The store id (required)
     * @param  string $memberId The member id (required)
     * @param  string $couponCode The coupon code (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DillerAPI\Model\ActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateCouponWithHttpInfo($storeId, $memberId, $couponCode)
    {
        $returnType = '\DillerAPI\Model\ActionResponse';
        $request = $this->validateCouponRequest($storeId, $memberId, $couponCode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DillerAPI\Model\ActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateCouponAsync
     *
     * This endpoint validates a coupon code for a specific member.
     *
     * @param  string $storeId The store id (required)
     * @param  string $memberId The member id (required)
     * @param  string $couponCode The coupon code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateCouponAsync($storeId, $memberId, $couponCode)
    {
        return $this->validateCouponAsyncWithHttpInfo($storeId, $memberId, $couponCode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateCouponAsyncWithHttpInfo
     *
     * This endpoint validates a coupon code for a specific member.
     *
     * @param  string $storeId The store id (required)
     * @param  string $memberId The member id (required)
     * @param  string $couponCode The coupon code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateCouponAsyncWithHttpInfo($storeId, $memberId, $couponCode)
    {
        $returnType = '\DillerAPI\Model\ActionResponse';
        $request = $this->validateCouponRequest($storeId, $memberId, $couponCode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateCoupon'
     *
     * @param  string $storeId The store id (required)
     * @param  string $memberId The member id (required)
     * @param  string $couponCode The coupon code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateCouponRequest($storeId, $memberId, $couponCode)
    {
        // verify the required parameter 'storeId' is set
        if ($storeId === null || (is_array($storeId) && count($storeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storeId when calling validateCoupon'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling validateCoupon'
            );
        }
        // verify the required parameter 'couponCode' is set
        if ($couponCode === null || (is_array($couponCode) && count($couponCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCode when calling validateCoupon'
            );
        }

        $resourcePath = '/api/v2.0/stores/{storeId}/members/{memberId}/coupons/{couponCode}/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storeId !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($storeId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }
        // path params
        if ($couponCode !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCode' . '}',
                ObjectSerializer::toPathValue($couponCode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
