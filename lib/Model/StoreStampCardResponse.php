<?php
/**
 * StoreStampCardResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DillerAPI\Model;

use \ArrayAccess;
use \DillerAPI\ObjectSerializer;

/**
 * StoreStampCardResponse Class Doc Comment
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */
class StoreStampCardResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreStampCardResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'externalId' => 'string',
'articleNumber' => 'string',
'title' => 'string',
'description' => 'string',
'requiredPoints' => 'int',
'isRestartable' => 'bool',
'requiredStamps' => 'int',
'imageUrl' => 'string',
'lastStampText' => 'string',
'productIds' => 'string[]',
'cardType' => 'string',
'thresholdAmount' => 'double',
'validFrom' => '\DateTime',
'validTo' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'externalId' => null,
'articleNumber' => null,
'title' => null,
'description' => null,
'requiredPoints' => 'int32',
'isRestartable' => null,
'requiredStamps' => 'int32',
'imageUrl' => null,
'lastStampText' => null,
'productIds' => null,
'cardType' => null,
'thresholdAmount' => 'double',
'validFrom' => 'date-time',
'validTo' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'externalId' => 'external_id',
'articleNumber' => 'article_number',
'title' => 'title',
'description' => 'description',
'requiredPoints' => 'required_points',
'isRestartable' => 'is_restartable',
'requiredStamps' => 'required_stamps',
'imageUrl' => 'image_url',
'lastStampText' => 'last_stamp_text',
'productIds' => 'product_ids',
'cardType' => 'card_type',
'thresholdAmount' => 'threshold_amount',
'validFrom' => 'valid_from',
'validTo' => 'valid_to'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'externalId' => 'setExternalId',
'articleNumber' => 'setArticleNumber',
'title' => 'setTitle',
'description' => 'setDescription',
'requiredPoints' => 'setRequiredPoints',
'isRestartable' => 'setIsRestartable',
'requiredStamps' => 'setRequiredStamps',
'imageUrl' => 'setImageUrl',
'lastStampText' => 'setLastStampText',
'productIds' => 'setProductIds',
'cardType' => 'setCardType',
'thresholdAmount' => 'setThresholdAmount',
'validFrom' => 'setValidFrom',
'validTo' => 'setValidTo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'externalId' => 'getExternalId',
'articleNumber' => 'getArticleNumber',
'title' => 'getTitle',
'description' => 'getDescription',
'requiredPoints' => 'getRequiredPoints',
'isRestartable' => 'getIsRestartable',
'requiredStamps' => 'getRequiredStamps',
'imageUrl' => 'getImageUrl',
'lastStampText' => 'getLastStampText',
'productIds' => 'getProductIds',
'cardType' => 'getCardType',
'thresholdAmount' => 'getThresholdAmount',
'validFrom' => 'getValidFrom',
'validTo' => 'getValidTo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['articleNumber'] = isset($data['articleNumber']) ? $data['articleNumber'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['requiredPoints'] = isset($data['requiredPoints']) ? $data['requiredPoints'] : null;
        $this->container['isRestartable'] = isset($data['isRestartable']) ? $data['isRestartable'] : null;
        $this->container['requiredStamps'] = isset($data['requiredStamps']) ? $data['requiredStamps'] : null;
        $this->container['imageUrl'] = isset($data['imageUrl']) ? $data['imageUrl'] : null;
        $this->container['lastStampText'] = isset($data['lastStampText']) ? $data['lastStampText'] : null;
        $this->container['productIds'] = isset($data['productIds']) ? $data['productIds'] : null;
        $this->container['cardType'] = isset($data['cardType']) ? $data['cardType'] : null;
        $this->container['thresholdAmount'] = isset($data['thresholdAmount']) ? $data['thresholdAmount'] : null;
        $this->container['validFrom'] = isset($data['validFrom']) ? $data['validFrom'] : null;
        $this->container['validTo'] = isset($data['validTo']) ? $data['validTo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId externalId
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets articleNumber
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['articleNumber'];
    }

    /**
     * Sets articleNumber
     *
     * @param string $articleNumber articleNumber
     *
     * @return $this
     */
    public function setArticleNumber($articleNumber)
    {
        $this->container['articleNumber'] = $articleNumber;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets requiredPoints
     *
     * @return int
     */
    public function getRequiredPoints()
    {
        return $this->container['requiredPoints'];
    }

    /**
     * Sets requiredPoints
     *
     * @param int $requiredPoints requiredPoints
     *
     * @return $this
     */
    public function setRequiredPoints($requiredPoints)
    {
        $this->container['requiredPoints'] = $requiredPoints;

        return $this;
    }

    /**
     * Gets isRestartable
     *
     * @return bool
     */
    public function getIsRestartable()
    {
        return $this->container['isRestartable'];
    }

    /**
     * Sets isRestartable
     *
     * @param bool $isRestartable isRestartable
     *
     * @return $this
     */
    public function setIsRestartable($isRestartable)
    {
        $this->container['isRestartable'] = $isRestartable;

        return $this;
    }

    /**
     * Gets requiredStamps
     *
     * @return int
     */
    public function getRequiredStamps()
    {
        return $this->container['requiredStamps'];
    }

    /**
     * Sets requiredStamps
     *
     * @param int $requiredStamps requiredStamps
     *
     * @return $this
     */
    public function setRequiredStamps($requiredStamps)
    {
        $this->container['requiredStamps'] = $requiredStamps;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string $imageUrl imageUrl
     *
     * @return $this
     */
    public function setImageUrl($imageUrl)
    {
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets lastStampText
     *
     * @return string
     */
    public function getLastStampText()
    {
        return $this->container['lastStampText'];
    }

    /**
     * Sets lastStampText
     *
     * @param string $lastStampText lastStampText
     *
     * @return $this
     */
    public function setLastStampText($lastStampText)
    {
        $this->container['lastStampText'] = $lastStampText;

        return $this;
    }

    /**
     * Gets productIds
     *
     * @return string[]
     */
    public function getProductIds()
    {
        return $this->container['productIds'];
    }

    /**
     * Sets productIds
     *
     * @param string[] $productIds productIds
     *
     * @return $this
     */
    public function setProductIds($productIds)
    {
        $this->container['productIds'] = $productIds;

        return $this;
    }

    /**
     * Gets cardType
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     *
     * @param string $cardType CardType can have the values 'standard' or 'threshold'
     *
     * @return $this
     */
    public function setCardType($cardType)
    {
        $this->container['cardType'] = $cardType;

        return $this;
    }

    /**
     * Gets thresholdAmount
     *
     * @return double
     */
    public function getThresholdAmount()
    {
        return $this->container['thresholdAmount'];
    }

    /**
     * Sets thresholdAmount
     *
     * @param double $thresholdAmount The minimum transaction amount required to earn a stamp when the stamp card is of type \\'threshold\\'.
     *
     * @return $this
     */
    public function setThresholdAmount($thresholdAmount)
    {
        $this->container['thresholdAmount'] = $thresholdAmount;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime $validFrom validFrom
     *
     * @return $this
     */
    public function setValidFrom($validFrom)
    {
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime $validTo validTo
     *
     * @return $this
     */
    public function setValidTo($validTo)
    {
        $this->container['validTo'] = $validTo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
