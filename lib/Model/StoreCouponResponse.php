<?php
/**
 * StoreCouponResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DillerAPI\Model;

use \ArrayAccess;
use \DillerAPI\ObjectSerializer;

/**
 * StoreCouponResponse Class Doc Comment
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */
class StoreCouponResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreCouponResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'externalIds' => '\DillerAPI\Model\ExternalCouponIdentifier[]',
'code' => 'string',
'title' => 'string',
'description' => 'string',
'articleNumber' => 'string',
'validFrom' => '\DateTime',
'validTo' => '\DateTime',
'type' => '\DillerAPI\Model\CouponType',
'discountType' => '\DillerAPI\Model\CouponDiscountType',
'discountValue' => 'double',
'maxRedemptions' => 'int',
'imageUrl' => 'string',
'productIds' => 'string[]',
'target' => '\DillerAPI\Model\CouponTarget',
'usageExtensionInDays' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'externalIds' => null,
'code' => null,
'title' => null,
'description' => null,
'articleNumber' => null,
'validFrom' => 'date-time',
'validTo' => 'date-time',
'type' => null,
'discountType' => null,
'discountValue' => 'double',
'maxRedemptions' => 'int32',
'imageUrl' => null,
'productIds' => null,
'target' => null,
'usageExtensionInDays' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'externalIds' => 'external_ids',
'code' => 'code',
'title' => 'title',
'description' => 'description',
'articleNumber' => 'article_number',
'validFrom' => 'valid_from',
'validTo' => 'valid_to',
'type' => 'type',
'discountType' => 'discount_type',
'discountValue' => 'discount_value',
'maxRedemptions' => 'max_redemptions',
'imageUrl' => 'image_url',
'productIds' => 'product_ids',
'target' => 'target',
'usageExtensionInDays' => 'usage_extension_in_days'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'externalIds' => 'setExternalIds',
'code' => 'setCode',
'title' => 'setTitle',
'description' => 'setDescription',
'articleNumber' => 'setArticleNumber',
'validFrom' => 'setValidFrom',
'validTo' => 'setValidTo',
'type' => 'setType',
'discountType' => 'setDiscountType',
'discountValue' => 'setDiscountValue',
'maxRedemptions' => 'setMaxRedemptions',
'imageUrl' => 'setImageUrl',
'productIds' => 'setProductIds',
'target' => 'setTarget',
'usageExtensionInDays' => 'setUsageExtensionInDays'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'externalIds' => 'getExternalIds',
'code' => 'getCode',
'title' => 'getTitle',
'description' => 'getDescription',
'articleNumber' => 'getArticleNumber',
'validFrom' => 'getValidFrom',
'validTo' => 'getValidTo',
'type' => 'getType',
'discountType' => 'getDiscountType',
'discountValue' => 'getDiscountValue',
'maxRedemptions' => 'getMaxRedemptions',
'imageUrl' => 'getImageUrl',
'productIds' => 'getProductIds',
'target' => 'getTarget',
'usageExtensionInDays' => 'getUsageExtensionInDays'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['externalIds'] = isset($data['externalIds']) ? $data['externalIds'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['articleNumber'] = isset($data['articleNumber']) ? $data['articleNumber'] : null;
        $this->container['validFrom'] = isset($data['validFrom']) ? $data['validFrom'] : null;
        $this->container['validTo'] = isset($data['validTo']) ? $data['validTo'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['discountType'] = isset($data['discountType']) ? $data['discountType'] : null;
        $this->container['discountValue'] = isset($data['discountValue']) ? $data['discountValue'] : null;
        $this->container['maxRedemptions'] = isset($data['maxRedemptions']) ? $data['maxRedemptions'] : null;
        $this->container['imageUrl'] = isset($data['imageUrl']) ? $data['imageUrl'] : null;
        $this->container['productIds'] = isset($data['productIds']) ? $data['productIds'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['usageExtensionInDays'] = isset($data['usageExtensionInDays']) ? $data['usageExtensionInDays'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['validFrom'] === null) {
            $invalidProperties[] = "'validFrom' can't be null";
        }
        if ($this->container['validTo'] === null) {
            $invalidProperties[] = "'validTo' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets externalIds
     *
     * @return \DillerAPI\Model\ExternalCouponIdentifier[]
     */
    public function getExternalIds()
    {
        return $this->container['externalIds'];
    }

    /**
     * Sets externalIds
     *
     * @param \DillerAPI\Model\ExternalCouponIdentifier[] $externalIds externalIds
     *
     * @return $this
     */
    public function setExternalIds($externalIds)
    {
        $this->container['externalIds'] = $externalIds;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets articleNumber
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['articleNumber'];
    }

    /**
     * Sets articleNumber
     *
     * @param string $articleNumber articleNumber
     *
     * @return $this
     */
    public function setArticleNumber($articleNumber)
    {
        $this->container['articleNumber'] = $articleNumber;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime $validFrom The startDate of the coupon
     *
     * @return $this
     */
    public function setValidFrom($validFrom)
    {
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime $validTo validTo
     *
     * @return $this
     */
    public function setValidTo($validTo)
    {
        $this->container['validTo'] = $validTo;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \DillerAPI\Model\CouponType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \DillerAPI\Model\CouponType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets discountType
     *
     * @return \DillerAPI\Model\CouponDiscountType
     */
    public function getDiscountType()
    {
        return $this->container['discountType'];
    }

    /**
     * Sets discountType
     *
     * @param \DillerAPI\Model\CouponDiscountType $discountType discountType
     *
     * @return $this
     */
    public function setDiscountType($discountType)
    {
        $this->container['discountType'] = $discountType;

        return $this;
    }

    /**
     * Gets discountValue
     *
     * @return double
     */
    public function getDiscountValue()
    {
        return $this->container['discountValue'];
    }

    /**
     * Sets discountValue
     *
     * @param double $discountValue discountValue
     *
     * @return $this
     */
    public function setDiscountValue($discountValue)
    {
        $this->container['discountValue'] = $discountValue;

        return $this;
    }

    /**
     * Gets maxRedemptions
     *
     * @return int
     */
    public function getMaxRedemptions()
    {
        return $this->container['maxRedemptions'];
    }

    /**
     * Sets maxRedemptions
     *
     * @param int $maxRedemptions maxRedemptions
     *
     * @return $this
     */
    public function setMaxRedemptions($maxRedemptions)
    {
        $this->container['maxRedemptions'] = $maxRedemptions;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string $imageUrl imageUrl
     *
     * @return $this
     */
    public function setImageUrl($imageUrl)
    {
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets productIds
     *
     * @return string[]
     */
    public function getProductIds()
    {
        return $this->container['productIds'];
    }

    /**
     * Sets productIds
     *
     * @param string[] $productIds productIds
     *
     * @return $this
     */
    public function setProductIds($productIds)
    {
        $this->container['productIds'] = $productIds;

        return $this;
    }

    /**
     * Gets target
     *
     * @return \DillerAPI\Model\CouponTarget
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param \DillerAPI\Model\CouponTarget $target target
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets usageExtensionInDays
     *
     * @return int
     */
    public function getUsageExtensionInDays()
    {
        return $this->container['usageExtensionInDays'];
    }

    /**
     * Sets usageExtensionInDays
     *
     * @param int $usageExtensionInDays usageExtensionInDays
     *
     * @return $this
     */
    public function setUsageExtensionInDays($usageExtensionInDays)
    {
        $this->container['usageExtensionInDays'] = $usageExtensionInDays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
