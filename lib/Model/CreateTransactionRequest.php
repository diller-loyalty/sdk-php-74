<?php
/**
 * CreateTransactionRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DillerAPI\Model;

use \ArrayAccess;
use \DillerAPI\ObjectSerializer;

/**
 * CreateTransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */
class CreateTransactionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateTransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'externalId' => 'string',
'createdAt' => '\DateTime',
'paymentDetails' => '\DillerAPI\Model\PaymentDetails[]',
'eftPos' => 'string',
'sendEmailReceipt' => 'bool',
'total' => 'double',
'totalTax' => 'double',
'totalDiscount' => 'double',
'currency' => 'string',
'roundOffAmount' => 'double',
'origin' => '\DillerAPI\Model\Origin',
'couponCodes' => 'string[]',
'stampCardIds' => 'int[]',
'stampCards' => '\DillerAPI\Model\StampCard[]',
'details' => '\DillerAPI\Model\TransactionDetailRequest[]',
'departmentId' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'externalId' => null,
'createdAt' => 'date-time',
'paymentDetails' => null,
'eftPos' => null,
'sendEmailReceipt' => null,
'total' => 'double',
'totalTax' => 'double',
'totalDiscount' => 'double',
'currency' => null,
'roundOffAmount' => 'double',
'origin' => null,
'couponCodes' => null,
'stampCardIds' => 'int32',
'stampCards' => null,
'details' => null,
'departmentId' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'externalId' => 'external_id',
'createdAt' => 'created_at',
'paymentDetails' => 'payment_details',
'eftPos' => 'eft_pos',
'sendEmailReceipt' => 'send_email_receipt',
'total' => 'total',
'totalTax' => 'total_tax',
'totalDiscount' => 'total_discount',
'currency' => 'currency',
'roundOffAmount' => 'round_off_amount',
'origin' => 'origin',
'couponCodes' => 'coupon_codes',
'stampCardIds' => 'stamp_card_ids',
'stampCards' => 'stamp_cards',
'details' => 'details',
'departmentId' => 'department_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'externalId' => 'setExternalId',
'createdAt' => 'setCreatedAt',
'paymentDetails' => 'setPaymentDetails',
'eftPos' => 'setEftPos',
'sendEmailReceipt' => 'setSendEmailReceipt',
'total' => 'setTotal',
'totalTax' => 'setTotalTax',
'totalDiscount' => 'setTotalDiscount',
'currency' => 'setCurrency',
'roundOffAmount' => 'setRoundOffAmount',
'origin' => 'setOrigin',
'couponCodes' => 'setCouponCodes',
'stampCardIds' => 'setStampCardIds',
'stampCards' => 'setStampCards',
'details' => 'setDetails',
'departmentId' => 'setDepartmentId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'externalId' => 'getExternalId',
'createdAt' => 'getCreatedAt',
'paymentDetails' => 'getPaymentDetails',
'eftPos' => 'getEftPos',
'sendEmailReceipt' => 'getSendEmailReceipt',
'total' => 'getTotal',
'totalTax' => 'getTotalTax',
'totalDiscount' => 'getTotalDiscount',
'currency' => 'getCurrency',
'roundOffAmount' => 'getRoundOffAmount',
'origin' => 'getOrigin',
'couponCodes' => 'getCouponCodes',
'stampCardIds' => 'getStampCardIds',
'stampCards' => 'getStampCards',
'details' => 'getDetails',
'departmentId' => 'getDepartmentId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['paymentDetails'] = isset($data['paymentDetails']) ? $data['paymentDetails'] : null;
        $this->container['eftPos'] = isset($data['eftPos']) ? $data['eftPos'] : null;
        $this->container['sendEmailReceipt'] = isset($data['sendEmailReceipt']) ? $data['sendEmailReceipt'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['totalTax'] = isset($data['totalTax']) ? $data['totalTax'] : null;
        $this->container['totalDiscount'] = isset($data['totalDiscount']) ? $data['totalDiscount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['roundOffAmount'] = isset($data['roundOffAmount']) ? $data['roundOffAmount'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['couponCodes'] = isset($data['couponCodes']) ? $data['couponCodes'] : null;
        $this->container['stampCardIds'] = isset($data['stampCardIds']) ? $data['stampCardIds'] : null;
        $this->container['stampCards'] = isset($data['stampCards']) ? $data['stampCards'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['departmentId'] = isset($data['departmentId']) ? $data['departmentId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId The store's transaction unique identifier. Eg. Order-1234
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The date and time the transaction was created in ISO 8601 format.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets paymentDetails
     *
     * @return \DillerAPI\Model\PaymentDetails[]
     */
    public function getPaymentDetails()
    {
        return $this->container['paymentDetails'];
    }

    /**
     * Sets paymentDetails
     *
     * @param \DillerAPI\Model\PaymentDetails[] $paymentDetails paymentDetails
     *
     * @return $this
     */
    public function setPaymentDetails($paymentDetails)
    {
        $this->container['paymentDetails'] = $paymentDetails;

        return $this;
    }

    /**
     * Gets eftPos
     *
     * @return string
     */
    public function getEftPos()
    {
        return $this->container['eftPos'];
    }

    /**
     * Sets eftPos
     *
     * @param string $eftPos Electronic funds transfer at point of sale
     *
     * @return $this
     */
    public function setEftPos($eftPos)
    {
        $this->container['eftPos'] = $eftPos;

        return $this;
    }

    /**
     * Gets sendEmailReceipt
     *
     * @return bool
     */
    public function getSendEmailReceipt()
    {
        return $this->container['sendEmailReceipt'];
    }

    /**
     * Sets sendEmailReceipt
     *
     * @param bool $sendEmailReceipt sendEmailReceipt
     *
     * @return $this
     */
    public function setSendEmailReceipt($sendEmailReceipt)
    {
        $this->container['sendEmailReceipt'] = $sendEmailReceipt;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param double $total Total amount paid by the customer, after discounts and taxes
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return double
     */
    public function getTotalTax()
    {
        return $this->container['totalTax'];
    }

    /**
     * Sets totalTax
     *
     * @param double $totalTax Total amount of taxes paid
     *
     * @return $this
     */
    public function setTotalTax($totalTax)
    {
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets totalDiscount
     *
     * @return double
     */
    public function getTotalDiscount()
    {
        return $this->container['totalDiscount'];
    }

    /**
     * Sets totalDiscount
     *
     * @param double $totalDiscount Discount amount applied to this purchase
     *
     * @return $this
     */
    public function setTotalDiscount($totalDiscount)
    {
        $this->container['totalDiscount'] = $totalDiscount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets roundOffAmount
     *
     * @return double
     */
    public function getRoundOffAmount()
    {
        return $this->container['roundOffAmount'];
    }

    /**
     * Sets roundOffAmount
     *
     * @param double $roundOffAmount Stores the specific value used for rounding calculations
     *
     * @return $this
     */
    public function setRoundOffAmount($roundOffAmount)
    {
        $this->container['roundOffAmount'] = $roundOffAmount;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \DillerAPI\Model\Origin
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \DillerAPI\Model\Origin $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets couponCodes
     *
     * @return string[]
     */
    public function getCouponCodes()
    {
        return $this->container['couponCodes'];
    }

    /**
     * Sets couponCodes
     *
     * @param string[] $couponCodes couponCodes
     *
     * @return $this
     */
    public function setCouponCodes($couponCodes)
    {
        $this->container['couponCodes'] = $couponCodes;

        return $this;
    }

    /**
     * Gets stampCardIds
     *
     * @return int[]
     */
    public function getStampCardIds()
    {
        return $this->container['stampCardIds'];
    }

    /**
     * Sets stampCardIds
     *
     * @param int[] $stampCardIds WARNING: This property is obsolete. Use the collection property StampCards instead.
     *
     * @return $this
     */
    public function setStampCardIds($stampCardIds)
    {
        $this->container['stampCardIds'] = $stampCardIds;

        return $this;
    }

    /**
     * Gets stampCards
     *
     * @return \DillerAPI\Model\StampCard[]
     */
    public function getStampCards()
    {
        return $this->container['stampCards'];
    }

    /**
     * Sets stampCards
     *
     * @param \DillerAPI\Model\StampCard[] $stampCards stampCards
     *
     * @return $this
     */
    public function setStampCards($stampCards)
    {
        $this->container['stampCards'] = $stampCards;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \DillerAPI\Model\TransactionDetailRequest[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \DillerAPI\Model\TransactionDetailRequest[] $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets departmentId
     *
     * @return string
     */
    public function getDepartmentId()
    {
        return $this->container['departmentId'];
    }

    /**
     * Sets departmentId
     *
     * @param string $departmentId The Id assigned by the retailer
     *
     * @return $this
     */
    public function setDepartmentId($departmentId)
    {
        $this->container['departmentId'] = $departmentId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
