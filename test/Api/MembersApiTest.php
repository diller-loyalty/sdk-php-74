<?php
/**
 * MembersApiTest
 * PHP version 5
 *
 * @category Class
 * @package  DillerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diller Retailer API
 *
 * The official Diller Retailer API (beta version) <br/> Last Updated: 15-02-2024 09:39
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.53
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace DillerAPI;

use DillerAPI\Configuration;
use DillerAPI\ApiException;
use DillerAPI\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * MembersApiTest Class Doc Comment
 *
 * @category Class
 * @package  DillerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembersApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteMember
     *
     * This endpoint deletes a member.  Note that while the member may not be immediately removed from the system,  they will be marked for deletion and permanently removed after a period of 10 days..
     *
     */
    public function testDeleteMember()
    {
    }

    /**
     * Test case for enrollMember
     *
     * Enrolls a member into the Loyalty Program.  This will create a new member in the system and send an activation link via SMS to the member.  If the member already exists, and GDPR is not accepted yet then a new activation link will be sent.  If the store does not have SMS enabled, the activation link will be sent by email..
     *
     */
    public function testEnrollMember()
    {
    }

    /**
     * Test case for getDependents
     *
     * Retrieves a member's dependents.
     *
     */
    public function testGetDependents()
    {
    }

    /**
     * Test case for getMemberByFilter
     *
     * Searchs members by email, phone number, activation token or any other identifier (country dependant - eg. SSN, licence plate, National ID).
     *
     */
    public function testGetMemberByFilter()
    {
    }

    /**
     * Test case for getMemberById
     *
     * Get member by id.
     *
     */
    public function testGetMemberById()
    {
    }

    /**
     * Test case for getWidgetProfile
     *
     * Get member widget details.
     *
     */
    public function testGetWidgetProfile()
    {
    }

    /**
     * Test case for loginOTP
     *
     * Sends a login OTP code that allows the member to login without the password..
     *
     */
    public function testLoginOTP()
    {
    }

    /**
     * Test case for loginOtpVerification
     *
     * Handles the verification of a One-Time Password (OTP) code during the login process..
     *
     */
    public function testLoginOtpVerification()
    {
    }

    /**
     * Test case for registerMember
     *
     * Adds a new member to the store.  This will create a new member and automatically add him to the Loyalty Program, followed by a welcome SMS.  If the store is not configured to send SMS, a welcome email is sent instead..
     *
     */
    public function testRegisterMember()
    {
    }

    /**
     * Test case for resetPhone
     *
     * Initiates the process of resetting or changing the member's phone number..
     *
     */
    public function testResetPhone()
    {
    }

    /**
     * Test case for resetPhoneVerification
     *
     * Finishes the process of resetting or changing the member's phone number..
     *
     */
    public function testResetPhoneVerification()
    {
    }

    /**
     * Test case for updateDependents
     *
     * Atomically add, update, or delete dependent objects. The dependent collection should represent all members' dependents.  To add a new dependent, set the id field to 0.  To update a dependent, send the entire dependent object.  To delete a dependent, remove it from the list..
     *
     */
    public function testUpdateDependents()
    {
    }

    /**
     * Test case for updateMember
     *
     * Updates the member's data that is on the payload..
     *
     */
    public function testUpdateMember()
    {
    }
}
